# NOTE: update this with your service name
service: donation-receiver

# Create an optimized package for our functions 
package:
  individually: true

custom:
  bundle:
    linting: false
    packager: yarn
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.stage}-donation-receiver

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1
  environment:
    tableName: ${self:custom.tableName}
    yandexCheckoutShopId: ${env:YANDEX_CHECKOUT_SHOP_ID}
    yandexCheckoutSecret: ${env:YANDEX_CHECKOUT_SECRET}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ DonationReceiverTable, Arn ]

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get
  donate:
    handler: donate.main
    events:
      - http:
          path: donate
          method: get
  notification:
    handler: notification.main
    events:
      - http:
          path: notification
          method: post
          cors: true

resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
